#!/bin/sh
cd $(dirname $0)
ISO=$1
MNTDIR=$2

VER=1.2
AUTHOR='Pontvieux Cyrille - jrd@enialis.net'
LICENCE='GPL v3+'
version() {
  echo "install-on-USB v$VER by $AUTHOR"
  echo "Licence : $LICENCE"
  echo '→ Install an ISO that use grub2 on an USB key'
}

usage() {
  version
  echo ''
  echo 'usage : install-on-USB.sh ISO_FILE USB_MOUNT_DIR'
  echo ''
  echo '  ISO_FILE : the full path to the ISO'
  echo '  USB_MOUNT_DIR : the full path to mounted dir of the USB key'
  echo '                  ex: /media/MyUSB'
  exit 1
}

if [ "$UID" -ne "0" ]; then
  echo "Error : you must run this script as root"
  exit 2
fi
which grub-install > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "Error : grub2 must be installed on the running system"
  echo "The install script ‘boot/bootinsh.sh’ will be used instead."
  echo "grub2 will be installed on the first USB boot and then a reboot will occur".
  ./bootinst.sh
  exit $?
fi
MNTDIR=$(echo $MNTDIR|sed 's:/$::')
if [ ! -f "$ISO" -o ! -d "$MNTDIR" ]; then
  usage
fi
DEVPART=$(mount | grep "on $MNTDIR" | cut -d' ' -f1 | head -n 1)
if [ "$DEVPART" = "" ]; then
  echo "Error : $MNTDIR doesn't seem to be mounted"
  exit 2
fi
DEVROOT=${DEVPART%${DEVPART: -1}}
which fdisk > /dev/null 2>&1
if [ $? -eq 0 ]; then
  GAP=$(fdisk -l -u $DEVROOT | grep "^${DEVROOT}1" | awk '{print $3}')
  if [ "$GAP" -lt 63 ]; then
    maxs=$(parted $DEVROOT unit s print |grep '^ 1'|awk '{print $3}')
    echo "Error : the post MBR gap is missing or not large enough (63 sectors)."
    echo "Suggestion : slightly move the first partition (${DEVROOT}1) to reach the gap size."
    echo ""
    echo "Do you want to slightly reduce this partition to free some space for the required post-MBR-gap?"
    echo "  parted ${DEVROOT} resize 1 63s $maxs"
    read -p "y/N ? " R
    if [ "$R" = "y" -o "$R" = "Y" ]; then
      umount -f ${DEVROOT}1
      parted ${DEVROOT} resize 1 63s $maxs
      ret=$?
      echo "Please unplug the USB key, re-plug in and re-run this script"
      exit $ret
    else
      exit 2
    fi
  fi
fi
T=$(mktemp -d)
trap "umount $T; rm -rf $T" INT TERM EXIT
grub-install --root-directory=$MNTDIR $DEVROOT || exit 5
mount -o loop $ISO $T || exit 3
cp -rv $T/* $MNTDIR/ || exit 4
umount $T
rm -rf $T
exit 0
